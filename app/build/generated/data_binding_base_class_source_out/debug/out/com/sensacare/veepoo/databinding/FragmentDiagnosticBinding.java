// Generated by view binder compiler. Do not edit!
package com.sensacare.veepoo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.sensacare.veepoo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDiagnosticBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Spinner categorySpinner;

  @NonNull
  public final Button clearLogsButton;

  @NonNull
  public final Switch debugModeSwitch;

  @NonNull
  public final TextView debugModeText;

  @NonNull
  public final Button exportLogsButton;

  @NonNull
  public final Spinner levelSpinner;

  @NonNull
  public final TextView logCountText;

  @NonNull
  public final RecyclerView logRecyclerView;

  @NonNull
  public final Button refreshButton;

  private FragmentDiagnosticBinding(@NonNull LinearLayout rootView,
      @NonNull Spinner categorySpinner, @NonNull Button clearLogsButton,
      @NonNull Switch debugModeSwitch, @NonNull TextView debugModeText,
      @NonNull Button exportLogsButton, @NonNull Spinner levelSpinner,
      @NonNull TextView logCountText, @NonNull RecyclerView logRecyclerView,
      @NonNull Button refreshButton) {
    this.rootView = rootView;
    this.categorySpinner = categorySpinner;
    this.clearLogsButton = clearLogsButton;
    this.debugModeSwitch = debugModeSwitch;
    this.debugModeText = debugModeText;
    this.exportLogsButton = exportLogsButton;
    this.levelSpinner = levelSpinner;
    this.logCountText = logCountText;
    this.logRecyclerView = logRecyclerView;
    this.refreshButton = refreshButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDiagnosticBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDiagnosticBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_diagnostic, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDiagnosticBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.categorySpinner;
      Spinner categorySpinner = ViewBindings.findChildViewById(rootView, id);
      if (categorySpinner == null) {
        break missingId;
      }

      id = R.id.clearLogsButton;
      Button clearLogsButton = ViewBindings.findChildViewById(rootView, id);
      if (clearLogsButton == null) {
        break missingId;
      }

      id = R.id.debugModeSwitch;
      Switch debugModeSwitch = ViewBindings.findChildViewById(rootView, id);
      if (debugModeSwitch == null) {
        break missingId;
      }

      id = R.id.debugModeText;
      TextView debugModeText = ViewBindings.findChildViewById(rootView, id);
      if (debugModeText == null) {
        break missingId;
      }

      id = R.id.exportLogsButton;
      Button exportLogsButton = ViewBindings.findChildViewById(rootView, id);
      if (exportLogsButton == null) {
        break missingId;
      }

      id = R.id.levelSpinner;
      Spinner levelSpinner = ViewBindings.findChildViewById(rootView, id);
      if (levelSpinner == null) {
        break missingId;
      }

      id = R.id.logCountText;
      TextView logCountText = ViewBindings.findChildViewById(rootView, id);
      if (logCountText == null) {
        break missingId;
      }

      id = R.id.logRecyclerView;
      RecyclerView logRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (logRecyclerView == null) {
        break missingId;
      }

      id = R.id.refreshButton;
      Button refreshButton = ViewBindings.findChildViewById(rootView, id);
      if (refreshButton == null) {
        break missingId;
      }

      return new FragmentDiagnosticBinding((LinearLayout) rootView, categorySpinner,
          clearLogsButton, debugModeSwitch, debugModeText, exportLogsButton, levelSpinner,
          logCountText, logRecyclerView, refreshButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
